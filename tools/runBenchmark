#!/usr/bin/env python3

import argparse
import sys

from benchmark import Benchmark, Network, Queries
from benchmark import Results


def main():
    argparser = argparse.ArgumentParser(
        prog='runBenchmark',
        description='Benchmark an algorithm on a network (.network) with a '
                    'query-set (.queries) and save results (.results).'
    )
    argparser.add_argument('network_file')
    argparser.add_argument('queries_file')
    argparser.add_argument('results_file')
    argparser.add_argument('algorithm')
    argparser.add_argument('-f', '--force', action='store_true')
    args = argparser.parse_args()

    # Check arguments
    if not args.force:
        error = False
        if not args.network_file.endswith('.network'):
            error = True
            print(f"Network file '{args.network_file}' does not end with '.network', "
                  f"are you sure this is a valid network file?", file=sys.stdout)
        if not args.queries_file.endswith('.queries'):
            error = True
            print(f"Queries file '{args.queries_file}' does not end with '.queries', "
                  f"are you sure this is a valid queries file?", file=sys.stdout)
        if not args.results_file.endswith('.results'):
            error = True
            print(f"Results file '{args.results_file}' does not end with '.results', "
                  f"are you sure this is a valid results file?", file=sys.stdout)
        if error:
            print(f"Use flag '-f' to ignore warnings.")
            exit(-1)

    # Read the network and queries into memory.
    network = Network.read(args.network_file)
    queries = Queries.read(args.queries_file)

    # Initialize the benchmark and run it.
    try:
        benchmark = Benchmark(network, queries, args.algorithm)
        results: Results = benchmark.run_benchmark()
    except Exception as e:
        print(f"An exception occurred during the benchmark:\n\t{e}")
        exit(-1)

    # Write the results to a .results file.
    results.write(args.results_file)


if __name__ == '__main__':
    main()
