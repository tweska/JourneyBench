#!/usr/bin/env python3

import argparse
import pickle

from benchmark import Network

SPEED = 4.5 * 1000 / 3600


def first_stage(network_path: str, stops_path: str):
    network = Network()
    network.read(network_path)

    lines = [f"{i} {node.latitude} {node.longitude}\n" for i, node in enumerate(network.nodes)]
    with open(stops_path, 'w') as file:
        file.writelines(lines)

    graph_out = 'graph.pickle'
    if stops_path.endswith('stops.txt'):
        graph_out = f'{stops_path[:-9]}{graph_out}'
    print(f"Run `tools/osm/osm.py {stops_path} {graph_out}` (on remote machine) and "
          f"run `tools/combinePaths {network_path} --graph {graph_out}` to finish.")


def second_stage(network_path: str, graph_path: str):
    network = Network()
    network.read(network_path)

    with open(graph_path, 'rb') as file:
        nodes, edges = pickle.load(file)
    print(len(nodes), len(edges))

    for v, data in nodes.items():
        if not v.startswith('__OSM_'):
            continue
        network.add_node(v, data['lat'], data['lon'], stop=False)
    for (u, v), data in edges.items():
        if not u.startswith('__OSM_'):
            u = int(u)
        if not v.startswith('__OSM_'):
            v = int(v)
        network.add_path(u, v, int(data['distance'] / SPEED))

    network.write(network_path)


def main():
    argparser = argparse.ArgumentParser(
        prog='combinePaths',
        description='Tool to combine paths in two steps.'
    )
    argparser.add_argument('network',
                           help='.network file')
    argparser.add_argument('--stops', required=False,
                           help='stops file to write to')
    argparser.add_argument('--graph', required=False,
                           help='graph file to read from')
    args = argparser.parse_args()
    if not (True if args.stops else False) ^ (True if args.graph else False):
        print("Must give a stops or graph file using --stops or --graph argument respectively!")
        exit(-1)

    if args.stops:
        first_stage(args.network, args.stops)
    else:
        second_stage(args.network, args.graph)


if __name__ == '__main__':
    main()
