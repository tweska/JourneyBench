#!/usr/bin/env python3

import pathlib
from typing import Optional

import networkx as nx
from shapely.geometry import Polygon


def prep(network_path: pathlib.Path, poly_path: Optional[pathlib.Path] = None):
    from benchmark import Network
    from geo.poly import parse_poly

    network = Network.read(network_path)
    G_stops = nx.Graph()
    G_stops.add_nodes_from([(i, {'lat': n.latitude, 'lon': n.longitude}) for i, n in enumerate(network.nodes)])

    if poly_path:
        with open(poly_path, 'r') as file:
            poly = parse_poly(file.readlines())
            assert(type(poly) == Polygon)
    else:
        poly = None

    return network, G_stops, poly


def run(osm_file_path: pathlib.Path, G_stops: nx.Graph, poly: Optional[Polygon]) -> nx.Graph:
    import geo.osm
    G = geo.osm.osm2nx(osm_file_path, poly)
    geo.osm.combine(G, G_stops)
    geo.osm.set_distance(G)
    G = geo.osm.contract(G)
    return G


def finish(network, G, speed_ms):
    for v, data in G.nodes(data=True):
        if type(v) == int:
            continue
        network.add_node(v, data['lat'], data['lon'], stop=False)

    for u, v, data in G.edges(data=True):
        network.add_path(u, v, int(round(data['distance'] / speed_ms)))


if __name__ == '__main__':
    import argparse
    import pickle

    parser = argparse.ArgumentParser(
        prog='parseOSM',
        description='combine existing Network file with paths from OpenStreetMaps'
    )
    parser.add_argument('input_network', type=pathlib.Path, help='input Network file')
    parser.add_argument('input_OSM', type=pathlib.Path, help='input OSM file')
    parser.add_argument('output', type=pathlib.Path, help='output Network file')
    parser.add_argument('pickle', type=pathlib.Path, nargs='?', help='intermediate Python Pickle file')
    parser.add_argument('--poly', type=pathlib.Path, required=False,
                        help='exclude data outside given polygon (Osmosis .poly file)')
    parser.add_argument('--stage', type=str, choices=['prep', 'run', 'finish'], required=False)
    parser.add_argument('--speed', type=float, default=4.5, required=False, help='walking speed in km/h')
    args = parser.parse_args()
    if args.stage and not args.pickle:
        parser.error('--stage requires pickle')
    speed_ms = args.speed * 1000 / 3600

    if args.stage == 'prep':
        _, G_stops, poly = prep(args.input_network, args.poly)
        poly_points = [p for p in poly.exterior.coords]
        with open(args.pickle, 'wb') as file:
            pickle.dump(('prep', G_stops, poly_points), file)
    elif args.stage == 'run':
        with open(args.pickle, 'rb') as file:
            stage, G_stops, poly_points = pickle.load(file)
        assert(stage == 'prep')
        poly = Polygon(poly_points)
        G = run(args.input_OSM, G_stops, poly)
        with open(args.pickle, 'wb') as file:
            pickle.dump(('run', G), file)
    elif args.stage == 'finish':
        from benchmark import Network
        network = Network.read(args.input_network)
        with open(args.pickle, 'rb') as file:
            stage, G = pickle.load(file)
        assert(stage == 'run')
        finish(network, G, speed_ms)
        G.clear()
        network.write(args.output)
    else:
        network, G_stops, poly = prep(args.input_network, args.poly)
        G = run(args.input_OSM, G_stops, poly)
        finish(network, G, speed_ms)
        G.clear()
        network.write(args.output)
