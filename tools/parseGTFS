#!/usr/bin/env python3

import argparse
from datetime import date, datetime, time, timedelta
from os.path import getsize
from typing import Optional

from benchmark import Network
from gtfs import GTFS, read
from gtfs.util import find_busiest_date, generate_date_trip_dict, generate_trip_stop_time_dict


def gtfs2network(gtfs: GTFS, start_date: Optional[date], days: int) -> Network:
    start_date = start_date if start_date else find_busiest_date(gtfs)
    end_date = start_date + timedelta(days=days-1)

    start_datetime = datetime.combine(start_date, time.min)
    end_datetime = datetime.combine(end_date, time.max)
    network = Network(int((end_datetime - start_datetime).total_seconds()))

    # Register stops
    for gtfs_stop in gtfs.stops:
        network.add_node(gtfs_stop.stop_id, gtfs_stop.stop_lat, gtfs_stop.stop_lon)

    # Register trips
    date_trip_dict = generate_date_trip_dict(gtfs)
    trip_stop_time_dict = generate_trip_stop_time_dict(gtfs)

    cur_date = start_date - timedelta(days=1)  # include previous day in initial search
    trip_id = 0
    while cur_date <= end_date:
        for trip in date_trip_dict[cur_date]:
            stop_times = [gtfs.stop_times[index] for index in trip_stop_time_dict[trip]]
            stops = [st.stop_id for st in stop_times]
            arrivals = [int(((datetime.combine(cur_date, time.min) + st.arrival_time) - start_datetime).total_seconds()) for st in stop_times]
            departures = [int(((datetime.combine(cur_date, time.min) + st.departure_time) - start_datetime).total_seconds()) for st in stop_times]
            for i in range(len(stops)-1):
                network.add_conn(
                    trip_id,
                    stops[i],
                    stops[i+1],
                    departures[i],
                    arrivals[i+1],
                )
            trip_id += 1
        cur_date += timedelta(days=1)

    return network


def main():
    argparser = argparse.ArgumentParser(
        prog='parseGTFS',
        description='Parse a network from a timetable source.',
    )
    argparser.add_argument('-o', '--output', required=True,
                           help='output network (.network) file')
    argparser.add_argument('-i', '--input', required=True,
                           help='input GTFS (.zip) file')
    argparser.add_argument('-d', '--date', required=False,
                           type=lambda s: datetime.strptime(s, '%Y-%m-%d').date(),
                           help='first date of the transit timetable')
    argparser.add_argument('-c', '--count', type=int, default=1,
                           help='number of days in the transit timetable')
    argparser.add_argument('-v', '--verbose', action='store_true',
                           help='print helpful messages')
    args = argparser.parse_args()

    gtfs: GTFS = read(args.input)
    if args.verbose:
        print(f"stats for GTFS file '{args.input}':")
        print(f"    stops:       {len(gtfs.stops):>8}")
        print(f"    services:    {len(gtfs.services):>8}")
        print(f"      changes:   {len(gtfs.service_changes):>8}")
        print(f"    trips:       {len(gtfs.trips):>8}")
        print(f"    stop times:  {len(gtfs.stop_times):>8}")

    network: Network = gtfs2network(gtfs, args.date, args.count)
    if args.verbose:
        print(f"\nstats for network file '{args.output}':")
        print(f"    end:        {network.end:>8}")
        print(f"    nodes:      {len(network.nodes):>8}")
        print(f"    trips:      {len(network.trips):>8}")
        print(f"    conns:      {len(network.conns):>8}")
        print(f"    paths:      {len(network.paths):>8}")

    network.write(args.output)
    if args.verbose:
        print(f"    size:       {getsize(args.output)/1024:>10.1f} KiB")


if __name__ == '__main__':
    main()
